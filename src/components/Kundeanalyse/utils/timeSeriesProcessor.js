/**
 * MODUL√ÜR TIDSSERIE-PROSESSERING
 * Isolert modul kun for √• h√•ndtere tidsserier og innev√¶rende √•r
 * Unng√•r konflikter med andre databehandlingsmodeler
 */

/**
 * Prosesserer SPESIFIKT √•rsdata for tidsserier
 * H√•ndterer innev√¶rende √•r fra skadehistorikk
 * ISOLERT fra andre databehandlinger
 */
export const processTimeSeriesDataIsolated = (raw√Örsdata, rawSkadehistorikk = [], rawAktivePolicies = []) => {
    console.log('üîç TimeSeriesProcessor: Starting processing with:', {
        √•rsdata: raw√Örsdata?.length || 0,
        skadehistorikk: rawSkadehistorikk?.length || 0,
        aktivePolicies: rawAktivePolicies?.length || 0
    });

    if (!raw√Örsdata || !Array.isArray(raw√Örsdata)) {
        console.log('‚ùå TimeSeriesProcessor: Invalid √•rsdata');
        return [];
    }

    const currentYear = new Date().getFullYear();

    // Debug: Se struktur p√• r√•data
    console.log('üîç TimeSeriesProcessor: Struktur p√• r√•data √•rsdata[0]:', raw√Örsdata[0]);

    // Konverter r√•data til standardformat
    let processedData = raw√Örsdata
        .sort((a, b) => a.√•r - b.√•r)
        .map(√•rData => {
            // H√•ndter b√•de r√•data (nestet) og allerede prosessert data (flat)
            const premie = √•rData.√∏konomi?.premie || √•rData.premie || 0;
            const skadebel√∏p = √•rData.√∏konomi?.skadebel√∏p || √•rData.skadebel√∏p || 0;
            const antallSkader = √•rData.volum?.antallSkader || √•rData.antallSkader || 0;

            return {
                √•r: √•rData.√•r,
                periode: √•rData.periode || √•rData.√•r.toString(),
                premie: premie,
                skadebel√∏p: skadebel√∏p,
                skadeProsent: premie > 0 ? (skadebel√∏p / premie) * 100 : 0,
                antallSkader: antallSkader,
                √•pneSkader: √•rData.volum?.√•pneSkader || √•rData.√•pneSkader || 0,
                aktiveProdukter: √•rData.volum?.aktiveProdukter || √•rData.aktiveProdukter || 0,
                erEstimert: √•rData.erEstimert || false
            };
        })
        .filter(√•rData => {
            // ALDRI inkluder innev√¶rende √•r fra aggregerte data - vi bygger det selv!
            if (√•rData.√•r === currentYear) {
                console.log(`‚ö†Ô∏è TimeSeriesProcessor: Filtrerer bort ${currentYear} fra aggregerte data (bygger selv fra skadehistorikk)`);
                return false;
            }

            // For andre √•r, filtrer ut kun hvis alle verdier er 0
            return √•rData.premie > 0 ||
                √•rData.skadebel√∏p > 0 ||
                √•rData.antallSkader > 0 ||
                √•rData.aktiveProdukter > 0;
        });

    console.log('üîç TimeSeriesProcessor: Prosesserte √•rsdata f√∏r 2025-sjekk:', processedData);

    // Alltid bygg innev√¶rende √•r fra skadehistorikk og aktivePolicies 
    // (aggregerte data inneholder ikke innev√¶rende √•r)
    if (rawSkadehistorikk && rawAktivePolicies) {
        console.log('üîß TimeSeriesProcessor: Bygger 2025-data fra skadehistorikk');

        // Filtrer skader fra innev√¶rende √•r
        const currentYearClaims = rawSkadehistorikk.filter(skade => {
            if (!skade.skadeDato) return false;

            // H√•ndter DD-MM-YYYY format
            let skade√Ör;
            if (typeof skade.skadeDato === 'string' && skade.skadeDato.includes('-')) {
                const parts = skade.skadeDato.split('-');
                skade√Ör = parseInt(parts[2]); // √Ör er siste del i DD-MM-YYYY
            } else {
                const date = new Date(skade.skadeDato);
                skade√Ör = date.getFullYear();
            }

            return skade√Ör === currentYear;
        });

        console.log(`üîç TimeSeriesProcessor: Fant ${currentYearClaims.length} skader for ${currentYear}`);

        // Bygg alltid 2025-data selv om det ikke er skader (vi trenger premie-info fra aktivePolicies)
        if (true) { // Bygg alltid
            // Estimer innev√¶rende √•rs premie fra aktive poliser (pro-rata)
            const monthsPassedInYear = new Date().getMonth() + 1; // 1-12
            const estimatedAnnualPremie = rawAktivePolicies.reduce((sum, policy) => {
                const √•rsPremie = policy.√∏konomi?.√•rsPremie || 0;
                console.log(`üí∞ Policy ${policy.policyNummer}: kr ${√•rsPremie}/√•r`);
                return sum + √•rsPremie;
            }, 0);
            const proRataPremie = (estimatedAnnualPremie * monthsPassedInYear) / 12;

            console.log(`üìä Premieberegning: kr ${estimatedAnnualPremie}/√•r * ${monthsPassedInYear}/12 = kr ${proRataPremie} (pro-rata)`);
            console.log(`üìä Aktive poliser: ${rawAktivePolicies.length} stk`);

            const totalSkadebel√∏p = currentYearClaims.reduce((sum, skade) => {
                // Beregn korrekt brutto og netto kostnad
                const utbetalt = skade.√∏konomi?.utbetalt || skade.utbetalt || 0;
                const reservert = skade.√∏konomi?.reservert || skade.reservert || 0;
                const regress = skade.√∏konomi?.regress || skade.regress || 0;
                const originalTotalKostnad = skade.√∏konomi?.totalKostnad || skade.totalKostnad || 0;

                // Beregn brutto kostnad (utbetalt + reservert)
                const beregnetBruttoKostnad = utbetalt + reservert;
                const bruttoKostnad = originalTotalKostnad > 0 ? originalTotalKostnad : beregnetBruttoKostnad;

                // Netto kostnad = brutto + regress (regress er negativt)
                const nettoKostnad = bruttoKostnad + regress;


                return sum + nettoKostnad;
            }, 0);

            const currentYearData = {
                √•r: currentYear,
                periode: currentYear.toString(),
                premie: proRataPremie, // Pro-rata estimat basert p√• aktive poliser
                skadebel√∏p: totalSkadebel√∏p,
                skadeProsent: proRataPremie > 0 ? (totalSkadebel√∏p / proRataPremie) * 100 : 0,
                antallSkader: currentYearClaims.length,
                √•pneSkader: currentYearClaims.filter(skade => skade.√•pen === 1).length,
                aktiveProdukter: rawAktivePolicies.length,
                erEstimert: true // Flagg for √• vise at dette er estimerte tall
            };

            processedData.push(currentYearData);
            processedData.sort((a, b) => a.√•r - b.√•r);

            console.log(`‚úÖ TimeSeriesProcessor: Lagt til ${currentYear}-data:`, currentYearData);
            console.log(`üìä Detaljer: ${currentYearClaims.length} skader, kr ${proRataPremie.toLocaleString()} premie, kr ${totalSkadebel√∏p.toLocaleString()} skadekostnad`);
        }
    }

    console.log('üîç TimeSeriesProcessor: Final result:', processedData);
    return processedData;
};

/**
 * Formaterer data for Recharts tidsserier
 */
export const formatTimeSeriesForChart = (timeSeriesData) => {
    return timeSeriesData.map(d => ({
        √•r: d.√•r.toString(),
        periode: d.periode,
        premie: d.premie,
        skadebel√∏p: d.skadebel√∏p,
        skadeprosent: d.skadeProsent,
        antallSkader: d.antallSkader,
        erEstimert: d.erEstimert
    }));
};

/**
 * Lager tabell-data for visning
 */
export const formatTimeSeriesForTable = (timeSeriesData) => {
    return timeSeriesData.map(d => ({
        √•r: d.√•r,
        premie: `kr ${d.premie.toLocaleString('no-NO')}${d.erEstimert ? ' (est.)' : ''}`,
        skadebel√∏p: `kr ${d.skadebel√∏p.toLocaleString('no-NO')}`,
        skadeprosent: `${d.skadeProsent.toFixed(1)}%`,
        antallSkader: d.antallSkader,
        status: d.erEstimert ? 'Estimert' : 'Faktisk'
    }));
};
